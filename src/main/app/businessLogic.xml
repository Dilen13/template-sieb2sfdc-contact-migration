<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:siebel="http://www.mulesoft.org/schema/mule/siebel" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:spring="http://www.springframework.org/schema/beans"
      version="EE-3.5.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/siebel http://www.mulesoft.org/schema/mule/siebel/current/mule-siebel.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
    <data-mapper:config name="Contact_Contact_To_Contact" transformationGraphPath="contact.contact_to_contact.grf" doc:name="Contact_Contact_To_Contact"/>
    <batch:job name="syncContactBatch" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <siebel:query-business-components config-ref="OracleSiebelBusinessObjects" businessObjectComponentType="Contact.Contact" doc:name="Oracle Siebel Business Objects" searchExpression="[Email Address] &lt;&gt; ''">
                <siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Id</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Email Address</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>First Name</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Last Name</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Work Phone #</siebel:fields-to-retrieve>					 
					 <siebel:fields-to-retrieve>Home Phone #</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Fax Phone #</siebel:fields-to-retrieve>					 
					 <siebel:fields-to-retrieve>Birth Date</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Assistant</siebel:fields-to-retrieve>
					 <siebel:fields-to-retrieve>Account</siebel:fields-to-retrieve>
                </siebel:fields-to-retrieve>
            </siebel:query-business-components>
        </batch:input>
        <batch:process-records>
            <batch:step name="forEachContactInAGetContactInBStep">
                <enricher source="#[payload]" target="#[recordVars['contactInB']]" doc:name="store Contact in 'contactInB'">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id FROM Contact WHERE Email = '#[payload[&quot;Email Address&quot;]]'" doc:name="Query Salesforce for Contact"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInBSetp" accept-expression="payload['Account'] != ''">
                
                <enricher doc:name="store Account in accountInTargetInstance">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id,Name from Account where Name = '#payload[&quot;Account&quot;]'" doc:name="Query Salesforce for Account"/>
                    <enrich source="#[payload]" target="#[recordVars['accountInTargetInstance']]"/>
                </enricher>
                <choice doc:name="Choice">
                    <when expression="#[recordVars['accountInTargetInstance'] is NullPayload]">
                        <enricher source="#[payload]" target="#[recordVars['idOfAccountInTargetInstance']]" doc:name="store id of account in target instance">
                            <processor-chain doc:name="Processor Chain">
                                <expression-component doc:name="prepare account for creation"><![CDATA[String name = payload['Account'];
payload['Account'] = new java.util.HashMap();
payload['Account'].put('Name', name);]]></expression-component>
                                <set-payload value="#[ [payload['Account']]]" doc:name="set payload with account to be created"/>
                                <sfdc:create config-ref="Salesforce" type="Account" doc:name="create account in B instance">
                                    <sfdc:objects ref="#[payload]"/>
                                </sfdc:create>

                                <expression-transformer expression="#[payload[0].getId()]" doc:name="get the id of the account created"/>
                            </processor-chain>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher source="#[payload]" target="#[recordVars['idOfAccountInTargetInstance']]" doc:name="store id of account in B">
                            <expression-transformer expression="#[recordVars['accountInTargetInstance']['Id']]" doc:name="get the id of the account in target"/>
                        </enricher>
                    </otherwise>
                </choice>

            </batch:step>
            <batch:step name="forEachContactThatShouldBeUpsertedInB" accept-policy="ALL">

            	<data-mapper:transform doc:name="Contact.Contact To Contact" config-ref="Contact_Contact_To_Contact"/>
                <expression-component doc:name="set contact's parent account id"><![CDATA[payload.put('AccountId', recordVars['idOfAccountInTargetInstance']);

if (recordVars['contactInB'] instanceof NullPayload){  
  	payload.remove('Id');  
  }  
  else {  
  	payload.put('Id', recordVars['contactInB']['Id']);  
  }]]></expression-component>


  
					
                <batch:commit doc:name="Batch Commit" size="200">


                    <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="Contact" doc:name="Upsert Contact in Salesforce">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="aft: #[payload]" level="INFO" doc:name="log result"/>

                </batch:commit>

            </batch:step>

        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="Scatter-Gather">
                 <processor-chain> 
                    <json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
                     <smtp:outbound-endpoint host="${smtp.host}" responseTimeout="10000" doc:name="send result of the batch in mail" connector-ref="Gmail" from="${mail.from}" password="${smtp.password}" port="${smtp.port}" subject="${mail.subject}" to="${mail.to}" user="${smtp.user}"/> 
                 </processor-chain> 
                <processor-chain>
                    <json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
                    <logger level="INFO" doc:name="log migration process has finished" message="Migration process has finished: #[payload]"/>
                </processor-chain>
            </scatter-gather>
            
        </batch:on-complete>
    </batch:job>
    <flow name="mainFlow" doc:name="mainFlow" doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.

">
        <batch:execute name="syncContactBatch" doc:name="Batch Execute"/>

        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>
</mule>
